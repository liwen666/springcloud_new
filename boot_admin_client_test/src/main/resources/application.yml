server:
  servlet:
#    context-path: /th-demo
    context-path: /
  port: 21000
spring:
#  main:
#    allow-bean-definition-overriding: true
  datasource:
    username: root
    password: root
    url: jdbc:mysql://192.168.42.136:3306/data_flow_test?serverTimezone=Hongkong&useUnicode=true&useSSL=false&characterEncoding=utf8
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      connection-timeout: 60000
      max-lifetime: 60000
      data-source-properties:
        maintainTimeStats: false
        prepStmtCacheSqlLimit: 2048
        rewriteBatchedStatements: true
        elideSetAutoCommits: true
        cacheResultSetMetadata: true
        cachePrepStmts: true
        prepStmtCacheSize: 250
        useServerPrepStmts: true
        useLocalSessionState: true
        cacheServerConfiguration: true
      validation-timeout: 3000
      minimum-idle: 10
      idle-timeout: 30000
      maximum-pool-size: 200
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 100MB
  application:
    name: clien_test
eureka:
  instance:
    metadata-map:
      user.name: lw
      user.password: 123456
    easeRenewalIntervalInSeconds: 10
    health-check-url-path: /actuator/health
    ip-address: 127.0.0.1
    prefer-ip-address: true
    instance-id: ${eureka.instance.ip-address}:${server.port}
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://127.0.0.1:9800/eureka/
#hikari:
#  master:
#    jdbc-url: jdbc:mysql://masterhost:3306/testdb?useUnicode=true&characterEncoding=utf8&useSSL=true&allowMultiQueries=true&verifyServerCertificate=false
#    username: root
#    password: root
#    maximum-pool-size: 20
#    pool-name: master
#    connection-timeout: 30000
#    idle-timeout: 600000
#    max-lifetime: 1765000
#  slave:
#    jdbc-url: jdbc:mysql://slavehost:3306/testdb?useUnicode=true&characterEncoding=utf8&useSSL=true&allowMultiQueries=true&verifyServerCertificate=false
#    username: root
#    password: root
#    maximum-pool-size: 80
#    pool-name: slave
#    connection-timeout: 30000
#    idle-timeout: 600000
#    max-lifetime: 1765000
#    read-only: true



# 开启 mock 功能
mock:
  server:
    enabled: true
    ip-address: 127.0.0.1:9800
#    services: BOOT-ADMIN-CLIENT,HELLO-SERVICE-1
    mock-server-url: /admin/mock
    services-map:
      BOOT-ADMIN-CLIENT: 127.0.0.1:9800

#      全局表示的是对所有的请求前面拼接上  serverurl 加上服务名小写
#    global: true
    # mock 服务器ip地址和端口
#mock.server.ip-address=123.90.8.1:18820
## mock 服务器的 url
#mock.server.mock-server-url=/admin/mock
## mock 服务的列表，这里填写 feign 服务的服务名，多个以 ，号隔开,并大写
#mock.server.services=PLATFORM-SERVICE,HELLO-SERVICE-1
#如果项目中需要所有服务都要使用 mock 功能，则添加下面的属性
## 开启全局 mock 功能，也就是项目中所有的 feign服务都需要 mock
#mock.server.global=true
#如果项目中需要服务直连，则添加下面的属性
## user-service 服务的直连ip地址和端口
#mock.server.services-map.user-service=192.168.111.10:9010
## cache-service 服务的直连ip地址和端口
#mock.server.services-map.cache-service=10.10.90.23:9090

#  关闭全局 mock 功能
#  mock.server.global=false
